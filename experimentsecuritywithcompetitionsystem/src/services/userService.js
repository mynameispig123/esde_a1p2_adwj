const config = require('../config/config');
const pool = require('../config/database');
const nodemailer = require('nodemailer');
const { mailtrapUserName, mailtrapPassword } = require('../config/config');
const { createLogger, format, transports } = require('winston');
const { printf } = format;
const loggerformat = printf(({ level, message, timestamp }) => {
    return `${timestamp} ${level}: ${message}`;
});
const transporter = nodemailer.createTransport({
    host: "smtp.mailtrap.io",
    port: 2525,
    auth: {
        user: mailtrapUserName, //generated by Mailtrap
        pass: mailtrapPassword //generated by Mailtrap
    }
});

module.exports.createUser = (fullname, email, password, callback) => {
    console.log("==============================================================");
    console.log("userService.js > createUser is called and running!");
    console.log("==============================================================");

    console.log('Checking the input parameter variable content.');
    console.log(fullname, email, password);
    pool.getConnection((err, connection) => {
        if (err) {
            console.log('Database connection error ', err);
            const logger = createLogger({
                format: format.combine(
                    format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
                    loggerformat
                ),
                transports: [
                    new transports.Console(),
                    new transports.File({ filename: './Logs/Errors.log', level: 'error' }),
                ],
            });
            logger.error('backend > src > controllers > userService.js Error on Database connection error for createUser! Error: ' + JSON.stringify(err) + '\n')

            callback(null, err);
        } else {
            connection.query(`INSERT INTO user ( fullname, email, user_password, 
                        role_id) VALUES (?,?,?,2) `, [fullname, email, password], (err, rows) => {
                if (err) {
                    const logger = createLogger({
                        format: format.combine(
                            format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
                            loggerformat
                        ),
                        transports: [
                            new transports.Console(),
                            new transports.File({ filename: './Logs/Errors.log', level: 'error' }),
                        ],
                    });
                    logger.error('backend > src > controllers > userService.js Error for createUser! Error: ' + JSON.stringify(err) + '\n')
                    callback(null, err);
                } else {
                    callback(rows, null);
                }
                connection.release();
            });
        }
    });


} // End of createUser

module.exports.updateUser = (recordId, newRoleId) => {
    console.log("==============================================================");
    console.log("userService.js > updateUser is called and running!");
    console.log("==============================================================");

    return new Promise((resolve, reject) => {
        //I referred to https://www.codota.com/code/javascript/functions/mysql/Pool/getConnection
        //to prepare the following code pattern which does not use callback technique (uses Promise technique)
        pool.getConnection((err, connection) => {
            if (err) {
                console.log('Database connection error ', err);
                const logger = createLogger({
                    format: format.combine(
                        format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
                        loggerformat
                    ),
                    transports: [
                        new transports.Console(),
                        new transports.File({ filename: './Logs/Errors.log', level: 'error' }),
                    ],
                });
                logger.error('backend > src > controllers > userService.js Error on Database connection error for updateUser! Error: ' + JSON.stringify(err) + '\n')
                resolve(err);
            } else {
                connection.query(`UPDATE user SET role_id = ? WHERE user_id = ?`, [newRoleId, recordId], (err, rows) => {
                    if (err) {
                        const logger = createLogger({
                            format: format.combine(
                                format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
                                loggerformat
                            ),
                            transports: [
                                new transports.Console(),
                                new transports.File({ filename: './Logs/Errors.log', level: 'error' }),
                            ],
                        });
                        logger.error('backend > src > controllers > userService.js Error for updateUser! Error: ' + JSON.stringify(err) + '\n')
                        reject(err);
                    } else {
                        resolve(rows);
                    }
                    connection.release();
                });
            }
        });
    }); //End of new Promise object creation

} //End of updateUser


module.exports.getUserData = (pageNumber, search) => {
    console.log("==============================================================");
    console.log("userService.js > getUserData is called and running!");
    console.log("==============================================================");

    const page = pageNumber;
    if (search == null) { search = ''; };
    const limit = 4; //Due to lack of test files, I have set a 3 instead of larger number such as 10 records per page
    const offset = (page - 1) * limit;

    //If the user did not provide any search text, the search variable
    //should be null. The following console.log should output undefined.
    //console.log(search);
    //-------------- Code which does not use stored procedure -----------
    //Query for fetching data with page number, search text and offset value
    if ((search == '') || (search == null)) {
        console.log('Prepare query without search text');
        userDataQuery = `SELECT user_id, fullname, email, role_name 
        FROM user INNER JOIN role ON user.role_id = role.role_id LIMIT ${limit} OFFSET ${offset};
        SET @total_records =(SELECT count(user_id) FROM user    );SELECT @total_records total_records; `;
    } else {
        userDataQuery = `SELECT user_id, fullname, email, role_name 
        FROM user INNER JOIN role ON user.role_id = role.role_id AND fullname LIKE '%${search}%'  LIMIT ${limit} OFFSET ${offset};
    SET @total_records =(SELECT count(user_id) FROM user WHERE fullname LIKE '%${search}%' );SELECT @total_records total_records;`;
    }

    return new Promise((resolve, reject) => {
        //I referred to https://www.codota.com/code/javascript/functions/mysql/Pool/getConnection
        //to prepare the following code pattern which does not use callback technique (uses Promise technique)
        pool.getConnection((err, connection) => {
            if (err) {
                console.log('Database connection error ', err);
                const logger = createLogger({
                    format: format.combine(
                        format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
                        loggerformat
                    ),
                    transports: [
                        new transports.Console(),
                        new transports.File({ filename: './Logs/Errors.log', level: 'error' }),
                    ],
                });
                logger.error('backend > src > controllers > userService.jsError on Database connection error for getUserData! Error: ' + JSON.stringify(err) + '\n')
                resolve(err);
            } else {

                connection.query(userDataQuery, [search, offset, limit], (err, results) => {
                    if (err) {
                        const logger = createLogger({
                            format: format.combine(
                                format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
                                loggerformat
                            ),
                            transports: [
                                new transports.Console(),
                                new transports.File({ filename: './Logs/Errors.log', level: 'error' }),
                            ],
                        });
                        logger.error('backend > src > controllers > userService.js Error for getUserData! Error: ' + JSON.stringify(err) + '\n')
                        reject(err);
                    } else {
                        console.log('Accessing total number of rows : ', results[2][0].total_records);
                        resolve(results);
                    }
                    connection.release();
                });
            }
        });
    }); //End of new Promise object creation

} //End of getUserData

module.exports.getOneUserData = function (recordId) {
    console.log("==============================================================");
    console.log("userService.js > getOneUserData is called and running!");
    console.log("==============================================================");

    console.log('Prepare query to fetch one user record');

    // --------------------- start of changes ------------------------
    userDataQuery = `SELECT user_id, fullname, email FROM user INNER JOIN role ON user.role_id = role.role_id WHERE user_id = ?`;

    return new Promise((resolve, reject) => {
        //I referred to https://www.codota.com/code/javascript/functions/mysql/Pool/getConnection
        //to prepare the following code pattern which does not use callback technique (uses Promise technique)
        pool.getConnection((err, connection) => {
            if (err) {
                console.log('Database connection error ', err);
                const logger = createLogger({
                    format: format.combine(
                        format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
                        loggerformat
                    ),
                    transports: [
                        new transports.Console(),
                        new transports.File({ filename: './Logs/Errors.log', level: 'error' }),
                    ],
                });
                logger.error('backend > src > controllers > userService.js Error on Database connection error for getOneUserData! Error: ' + JSON.stringify(err) + '\n')
                resolve(err);
            } else {
                connection.query(userDataQuery, [recordId], (err, results) => {
                    if (err) {
                        const logger = createLogger({
                            format: format.combine(
                                format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
                                loggerformat
                            ),
                            transports: [
                                new transports.Console(),
                                new transports.File({ filename: './Logs/Errors.log', level: 'error' }),
                            ],
                        });
                        logger.error('backend > src > controllers > userService.jsError for getOneUserData! Error: ' + JSON.stringify(err) + '\n')
                        reject(err);
                    } else {
                        // console.log("results: " + results[0].user_id);
                        resolve(results);
                    }
                    connection.release();
                });
            }
        });
    }); //End of new Promise object creation

} //End of getOneUserData

module.exports.getOneUserDataByEmail = function (search) {
    console.log("==============================================================");
    console.log("userService.js > getOneUserDataByEmail is called and running!");
    console.log("==============================================================");

    console.log('Prepare query to fetch one user record');
    console.log("Search parameter: " + search);
    return new Promise((resolve, reject) => {
        //I referred to https://www.codota.com/code/javascript/functions/mysql/Pool/getConnection
        //to prepare the following code pattern which does not use callback technique (uses Promise technique)
        pool.getConnection((err, connection) => {
            if (err) {
                console.log('Database connection error ', err);
                console.log('Database connection error ', err);
                const logger = createLogger({
                    format: format.combine(
                        format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
                        loggerformat
                    ),
                    transports: [
                        new transports.Console(),
                        new transports.File({ filename: './Logs/Errors.log', level: 'error' }),
                    ],
                });
                logger.error('backend > src > controllers > userService.js Error on database connection for getOneUserDataByEmail! Error: ' + JSON.stringify(err) + '\n')
                resolve(err);
            } else {
                userDataQuery = `SELECT user_id, fullname, email, user.role_id, role_name FROM user INNER JOIN role ON user.role_id = role.role_id WHERE email = ?`;
                connection.query(userDataQuery, [search], (err, results) => {
                    if (err) {
                        const logger = createLogger({
                            format: format.combine(
                                format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
                                loggerformat
                            ),
                            transports: [
                                new transports.Console(),
                                new transports.File({ filename: './Logs/Errors.log', level: 'error' }),
                            ],
                        });
                        logger.error('backend > src > controllers > userService.jsError for getOneUserDataByEmail! Error: ' + JSON.stringify(err) + '\n')
                        reject(err);
                    } else {
                        resolve(results);
                    }
                    connection.release();
                });
            }
        });
    }); //End of new Promise object creation

} //End of getOneUserDataByEmail

module.exports.getOneDesignData = function (recordId) {
    console.log("==============================================================");
    console.log("userService.js > getOneDesignData is called and running!");
    console.log("==============================================================");

    console.log('Prepare query to fetch one design record');
    var userDataQuery = `SELECT file_id,cloudinary_file_id,cloudinary_url,design_title,design_description,created_by_id FROM file WHERE file_id=?`;

    return new Promise((resolve, reject) => {
        //I referred to https://www.codota.com/code/javascript/functions/mysql/Pool/getConnection
        //to prepare the following code pattern which does not use callback technique (uses Promise technique)
        pool.getConnection((err, connection) => {
            if (err) {
                console.log('Database connection error ', err);
                const logger = createLogger({
                    format: format.combine(
                        format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
                        loggerformat
                    ),
                    transports: [
                        new transports.Console(),
                        new transports.File({ filename: './Logs/Errors.log', level: 'error' }),
                    ],
                });
                logger.error('backend > src > controllers > userService.js Error on database connection for getOneDeisgnData! Error: ' + JSON.stringify(err) + '\n')
                resolve(err);
            } else {
                connection.query(userDataQuery, [recordId], (err, results) => {
                    if (err) {
                        const logger = createLogger({
                            format: format.combine(
                                format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
                                loggerformat
                            ),
                            transports: [
                                new transports.Console(),
                                new transports.File({ filename: './Logs/Errors.log', level: 'error' }),
                            ],
                        });
                        logger.error('backend > src > controllers > userService.js Error for getOneDeisgnData! Error: ' + JSON.stringify(err) + '\n')
                        reject(err);
                    } else {
                        console.log(results);
                        resolve(results);
                    }
                    connection.release();
                });
            }
        });
    }); //End of new Promise object creation

} //End of getOneDesignData

module.exports.updateDesign = (recordId, title, description) => {
    console.log("==============================================================");
    console.log("userService.js > updateDesign is called and running!");
    console.log("==============================================================");

    return new Promise((resolve, reject) => {
        //I referred to https://www.codota.com/code/javascript/functions/mysql/Pool/getConnection
        //to prepare the following code pattern which does not use callback technique (uses Promise technique)
        pool.getConnection((err, connection) => {
            if (err) {
                console.log('Database connection error ', err);
                const logger = createLogger({
                    format: format.combine(
                        format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
                        loggerformat
                    ),
                    transports: [
                        new transports.Console(),
                        new transports.File({ filename: './Logs/Errors.log', level: 'error' }),
                    ],
                });
                logger.error('backend > src > controllers > userService.js Error on database connection for updateDeisgn! Error: ' + JSON.stringify(err) + '\n')
                resolve(err);
            } else {
                var sqlQuery = `UPDATE file SET design_title = ? , design_description = ? WHERE file_id = ?`;
                connection.query(sqlQuery, [title, description, recordId], (err, rows) => {
                    if (err) {
                        const logger = createLogger({
                            format: format.combine(
                                format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
                                loggerformat
                            ),
                            transports: [
                                new transports.Console(),
                                new transports.File({ filename: './Logs/Errors.log', level: 'error' }),
                            ],
                        });
                        logger.error('backend > src > controllers > userService.jsError for updateDeisgn! Error: ' + JSON.stringify(err) + '\n' )
                        reject(err);
                    } else {
                        resolve(rows);
                    }
                    connection.release();
                });
            }
        });
    }); //End of new Promise object creation

} //End of updateDesign

// custom created module
// module.exports.getUserIdFromFileId = (fileId) => {
//     console.log("==============================================================");
//     console.log("userService.js > getUserIdFromFileId is called and running!");
//     console.log("==============================================================");

//     return new Promise((resolve, reject) => {
//         pool.getConnection((err, connection) => {
//             if (err) {
//                 console.log('Database connection error ', err);
//                 resolve(err);
//             } else {
//                 let sqlQuery = `SELECT created_by_id FROM file WHERE file_id = ?`;
//                 connection.query(sqlQuery, [fileId], (err, result) => {
//                     if (err) {
//                         reject(err);
//                     } else {
//                         console.log("SQL Command successfully executed");
//                         console.log("-------------");
//                         console.log("results returned:");
//                         console.log(result);
//                         console.log("-------------");

//                         resolve(result[0].created_by_id);
//                     }
//                     connection.release();
//                 });
//             }
//         });
//     }); //End of new Promise object creation


// } //End of getUserIdFromFileId 

module.exports.createOneEmailInvitation = (userData, receipientName, receipientEmail) => {
    console.log("==============================================================");
    console.log("userService.js > createOneEmailInvitation is called and running!");
    console.log("==============================================================");

    return new Promise((resolve, reject) => {
        console.log('userService createOneEmailInvitation is running');
        console.log('Inspect whether the userData variable has content:')
        console.log(userData);

        // send mail with defined transport object
        try {
            let info = transporter.sendMail({
                from: `${userData.fullname}<${userData.email}>`, // sender address
                to: receipientEmail, // list of receivers
                subject: "Hello from Bee competition system admin", // Subject line
                text: `Hi ${receipientEmail} You have been invited by your friend, ${userData.fullname} to participate in a competition at http://localhost:3001`, // plain text body
                html: `Hi ${receipientName} You have been invited by your friend, ${userData.fullname} to participate in a competition at http://localhost:3001`, // html body
            });
            resolve({ status: 'success', description: 'Email sent' });
        } catch (error) {
            const logger = createLogger({
                format: format.combine(
                    format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
                    loggerformat
                ),
                transports: [
                    new transports.Console(),
                    new transports.File({ filename: './Logs/Errors.log', level: 'error' }),
                ],
            });
            logger.error('backend > src > controllers > userService.js Error for createOneEmailInvitation! Error: ' + JSON.stringify(error) + '\n')
            reject({ status: 'fail', description: error });
        }
    }); //End of new Promise object creation
} //End of createOneEmailInvitation
